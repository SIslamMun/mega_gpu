#include <cuda_runtime.h>
#include <fcntl.h>
#include <unistd.h>
#include <iostream>
#include <cstring>
#include "cufile_api.h"  // Include your custom cuFile interceptor

#define CHECK_CUDA(call)                                                       \
    do {                                                                       \
        cudaError_t err = call;                                                \
        if (err != cudaSuccess) {                                              \
            std::cerr << "CUDA Error: " << cudaGetErrorString(err) << std::endl;\
            exit(1);                                                           \
        }                                                                      \
    } while (0)

// CUDA Kernel for vector addition
__global__ void vectorAdd(const float *A, const float *B, float *C, int N) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < N) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    const int N = 1024; // Vector size
    const size_t size = N * sizeof(float);

    // GPU memory
    float *d_A, *d_B, *d_C;

    // Use cudaMallocManaged to ensure 4KB alignment
    CHECK_CUDA(cudaMallocManaged(&d_A, size));
    CHECK_CUDA(cudaMallocManaged(&d_B, size));
    CHECK_CUDA(cudaMallocManaged(&d_C, size));

    // Register GPU memory with cuFile
    HERMES_CUFILE_API.cuFileBufRegister(d_C, size, 0);

    // Initialize input vectors on host
    for (int i = 0; i < N; ++i) {        d_A[i] = i * 1.0f;
        d_B[i] = i * 2.0f;
    }

    // Perform vector addition
    vectorAdd<<<(N + 255) / 256, 256>>>(d_A, d_B, d_C, N);
    CHECK_CUDA(cudaDeviceSynchronize());

    std::cout << "Vector addition completed on GPU." << std::endl;
    

    // Open output file with O_DIRECT
    int fd_out = open("gpu_output_file.dat", O_CREAT | O_WRONLY | O_DIRECT, 0664);
    if (fd_out < 0) {
        std::cerr << "Failed to open output file: " << strerror(errno) << std::endl;
        return -1;
    }

    CUfileHandle_t file_handle_out;
    CUfileDescr_t cf_descr = {};
    cf_descr.handle.fd = fd_out;

    HERMES_CUFILE_API.cuFileHandleRegister(&file_handle_out, &cf_descr);

    // Write result to file
    ssize_t written_bytes = HERMES_CUFILE_API.cuFileWrite(file_handle_out, d_C, size, 0, 0);
    if (written_bytes < 0) {
        std::cerr << "cuFileWrite failed! Error code: " << written_bytes << std::endl;
        return -1;
    }
    std::cout << "Data written to file successfully: " << written_bytes << " bytes." << std::endl;

    close(fd_out);

    // Cleanup
    HERMES_CUFILE_API.cuFileHandleDeregister(file_handle_out);
    HERMES_CUFILE_API.cuFileBufDeregister(d_C);
    CHECK_CUDA(cudaFree(d_A));
    CHECK_CUDA(cudaFree(d_B));
    CHECK_CUDA(cudaFree(d_C));

    std::cout << "Program completed successfully!" << std::endl;
    return 0;
}


